<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JS Calc</title>
   
    <style>
      *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Helvetica;
}

body {
  background-color: #333;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 3em;
}

#calc {
  width: 400px;
  padding: 0.5em;
  background-color: #c4c4c4;
  color: #000;
  display: flex;
  flex-direction: column;
}

#calc h3 {
  font-size: 0.8em;
  font-weight: 300;
  color: #666;
}

#operations {
  text-align: right;
}

#previous-operation {
  color: #777;
  padding: 0.2em;
  overflow-wrap: break-word;
  min-height: 1.6em;
}

#current-operation {
  min-height: 1.6em;
  font-size: 3em;
  font-weight: 700;
  padding: 0.2em;
  overflow-wrap: break-word;
}

#buttons-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  gap: 3px;
}

#buttons-container button {
  border: 1px solid transparent;
  border-radius: 0;
  height: 4em;
  font-size: 1.2em;
  background-color: #dbdbdb;
  cursor: pointer;
}

#buttons-container .number {
  background-color: #f3f3f3;
}

#buttons-container button:hover {
  background-color: #bababa;
  border-color: #999;
}

#buttons-container #equal-btn {
  grid-column: span 2;
  background-color: #75a5cb;
}

#buttons-container #equal-btn:hover {
  grid-column: span 2;
  background-color: #3a91d8;
      }
    </style>



  </head>
  <body>
    <div id="calc">
      <h3>Calculadora</h3>
      <div id="operations">
        <div id="previous-operation"></div>
        <div id="current-operation"></div>
      </div>
      <div id="buttons-container">
        <button>CE</button>
        <button>C</button>
        <button>DEL</button>
        <button>/</button>
        <button class="number">7</button>
        <button class="number">8</button>
        <button class="number">9</button>
        <button>*</button>
        <button class="number">4</button>
        <button class="number">5</button>
        <button class="number">6</button>
        <button>-</button>
        <button class="number">1</button>
        <button class="number">2</button>
        <button class="number">3</button>
        <button>+</button>
        <button class="number">0</button>
        <button class="number">.</button>
        <button id="equal-btn">=</button>
      </div>
    </div>

    <script>
      const previousOperationText = document.querySelector("#previous-operation");
const currentOperationText = document.querySelector("#current-operation");
const buttons = document.querySelectorAll("#buttons-container button");

class Calculator {
  constructor(previousOperationText, currentOperationText) {
    this.previousOperationText = previousOperationText;
    this.currentOperationText = currentOperationText;
    this.currentOperation = "";
  }

  // add digit to calculator screen
  addDigit(digit) {
    console.log(digit);
    // Check if number already has a dot
    if (digit === "." && this.currentOperationText.innerText.includes(".")) {
      return;
    }

    this.currentOperation = digit;
    this.updateScreen();
  }

  // process all calculator operations
  processOperation(operation) {
    // Check if current value is empty
    if (this.currentOperationText.innerText === "" && operation !== "C") {
      // Change operation
      if (this.previousOperationText.innerText !== "") {
        this.changeOperation(operation);
      }
      return;
    }

    // Get current and previous values
    let operationValue;
    let previous = +this.previousOperationText.innerText.split(" ")[0];
    let current = +this.currentOperationText.innerText;

    switch (operation) {
      case "+":
        operationValue = previous + current;
        this.updateScreen(operationValue, operation, current, previous);
        break;
      case "-":
        operationValue = previous - current;
        this.updateScreen(operationValue, operation, current, previous);
        break;
      case "*":
        operationValue = previous * current;
        this.updateScreen(operationValue, operation, current, previous);
        break;
      case "/":
        operationValue = previous / current;
        this.updateScreen(operationValue, operation, current, previous);
        break;
      case "DEL":
        this.processDelOperator();
        break;
      case "CE":
        this.processClearCurrentOperator();
        break;
      case "C":
        this.processClearOperator();
        break;
      case "=":
        this.processEqualOperator();
        break;
      default:
        return;
    }
  }

  // Change values of calculator screen
  updateScreen(
    operationValue = null,
    operation = null,
    current = null,
    previous = null
  ) {
    if (operationValue === null) {
      // Append number to current value
      this.currentOperationText.innerText += this.currentOperation;
    } else {
      // Check if value is zero, if is just add current value
      if (previous === 0) {
        operationValue = current;
      }
      // Add current value to previous
      this.previousOperationText.innerText = `${operationValue} ${operation}`;
      this.currentOperationText.innerText = "";
    }
  }

  // Change math operation
  changeOperation(operation) {
    const mathOperations = ["*", "-", "+", "/"];

    if (!mathOperations.includes(operation)) {
      return;
    }

    this.previousOperationText.innerText =
      this.previousOperationText.innerText.slice(0, -1) + operation;
  }

  // Delete a digit
  processDelOperator() {
    this.currentOperationText.innerText =
      this.currentOperationText.innerText.slice(0, -1);
  }

  // Clear current operation
  processClearCurrentOperator() {
    this.currentOperationText.innerText = "";
  }

  // Clear all operations
  processClearOperator() {
    this.currentOperationText.innerText = "";
    this.previousOperationText.innerText = "";
  }

  // Process an operation
  processEqualOperator() {
    let operation = this.previousOperationText.innerText.split(" ")[1];

    this.processOperation(operation);
  }
}

const calc = new Calculator(previousOperationText, currentOperationText);

buttons.forEach((btn) => {
  btn.addEventListener("click", (e) => {
    const value = e.target.innerText;

    if (+value >= 0 || value === ".") {
      console.log(value);
      calc.addDigit(value);
    } else {
      calc.processOperation(value);
    }
  });
});
    </script>
  
  </body>

</html>
